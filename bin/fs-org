#!/usr/bin/env python3
# Copyright (c) 2025 Jacob Peyron <jacob.peyron@gmail.com>
# Use of this source code is governed by an ICU License that can be found in the LICENSE file.
import argparse
import hashlib
import os
import re
import shutil
import sys
from collections.abc import Generator
from concurrent.futures import ProcessPoolExecutor, as_completed
from dataclasses import dataclass
from datetime import datetime
from enum import Enum
from os.path import abspath, dirname, exists, join
from typing import Optional

# pylint: disable=C0116,C0301

@dataclass
class Relocation:
    """Represents a file move from the paths src to dst"""

    src: str
    dst: str


@dataclass
class Range:
    """Inclusive range of integers"""

    min: int
    max: int

    def valid(self):
        return self.min <= self.max

    def shift(self, step: int) -> 'Range':
        return Range(self.min + step, self.max + step)

    def iter(self) -> Generator[int, None, None]:
        if not self.valid():
            raise RuntimeError("trying to iterate a non-valid range")

        return range(self.min, self.max)

    def __str__(self) -> str:
        return f"[{self.min} - {self.max}]"


class PromptAction(Enum):
    """Action when prompting user for multiple options"""
    OK = 1
    QUIT = 2
    SKIPALL = 3


def date_mv_cmd(args: argparse.Namespace) -> int:
    chat("Collecting files...\n", args.verbose)
    relocs = scan_date_relocations(
        args.directory, args.dst_fmt, args.recursive, args.relative, args.verbose
    )

    no_self_refs = [r for r in relocs if abspath(r.src) != abspath(r.dst)]

    collision_relocs = [r for r in no_self_refs if exists(r.dst)]

    if collision_relocs:
        print("Destinations that already exists:")
        print_relocs(collision_relocs)
        print("The above destinations (on the right) already exists")
        # TODO: Add the options to include these
        answer = prompt_yn("Continue / skip these?", default_yes=True)
        if not answer:
            return 2

    dst_free_relocs = [r for r in no_self_refs if not exists(r.dst)]

    # Collect relocations with the same destination
    dst_to_srcs = map_dst_to_sources(dst_free_relocs)
    unique_dsts = [srcs[0] for dst, srcs in dst_to_srcs.items() if len(srcs) == 1]
    similar_dsts = [srcs for dst, srcs in dst_to_srcs.items() if len(srcs) > 1]

    # Check if there are any destination collisions, and in that case let the
    # user decide which options to move.
    final_relocs = list(unique_dsts)
    if similar_dsts:
        addition, ok = prompt_relocation_sources(similar_dsts)
        if not ok:
            return 2
        final_relocs += addition

    if not final_relocs:
        print("\nNo files to move")
        return 0

    print("\nRelocations:")
    print_relocs(final_relocs)
    if args.apply:
        answer = prompt_yn("Move files?")
        if not answer:
            return 2

        move(final_relocs, args.verbose)
        print("Done!")
    else:
        print("This is a dry-run. To move the files, re-run the command with --apply")

    return 0


def checksum_rm_cmd(args: argparse.Namespace):
    chat("Collecting checksums...", args.verbose)
    checksums = scan_checksums(args.directory, args.recursive, args.verbose)
    if args.verbose:
        print_checksums(checksums)

    inv_sums = invert_dict_buckets(checksums)
    dupe_groups = [paths for _, paths in inv_sums.items() if len(paths) > 1]

    if args.verbose:
        print("\nDuplicate files:")
        print_buckets(
            {sum.hex(): paths for sum, paths in inv_sums.items() if len(paths) > 1}
        )

    if len(dupe_groups) == 0:
        print("All files unique, got nothing to do")
        return 0

    to_remove, ok = prompt_multi_combi_skip(
        "These file have the same content, which one to remove?", dupe_groups
    )
    if not ok:
        return 2
    if len(to_remove) == 0:
        print("\nNo files selected, got nothing to do")
        return 0

    print("\nTo be removed:")
    for r in to_remove:
        print(r)

    if args.apply:
        answer = prompt_yn("Remove files?")
        if not answer:
            return 2

        remove(to_remove, args.verbose)
        print("Done!")
    else:
        print("This is a dry-run. To remove the files, re-run the command with --apply")

    return 0


def scan_date_relocations(
    directory: str,
    dst_fmt: str,
    recursive: bool,
    relative: bool,
    verbose: bool,
) -> list[Relocation]:
    """Collect files that can be relocated, based on their filenames"""
    files = []
    for entry in scan_directory(directory, recursive, verbose):
        if not entry.is_file():
            raise RuntimeError("scan_directory returned directory")

        date = find_date_substr(entry.name)
        if date is None:
            chat(f"Date not found, {entry.name} skipped", verbose)
            continue

        dst_dir = dirname(entry.path) if relative else directory
        target_dir = os.path.join(dst_dir, date.strftime(dst_fmt))
        target = join(target_dir, entry.name)

        files.append(Relocation(src=entry.path, dst=target))

    return files


def find_date_substr(date_str: str) -> Optional[datetime]:
    date_pattern = r'\d{4}-\d{2}-\d{2}|\d{2}-\d{2}-\d{2}|\d{8}|\d{6}'
    match = re.search(date_pattern, date_str)
    if not match:
        return None

    date_substr = match.group()
    match len(date_substr):
        case 6:
            date_format = '%y%m%d'
        case 8:
            if '-' in date_substr:
                date_format = '%y-%m-%d'
            else:
                date_format = '%Y%m%d'
        case 10:
            date_format = '%Y-%m-%d'
        case _:
            return None

    try:
        return datetime.strptime(date_substr, date_format)
    except ValueError:
        pass

    return None


def scan_checksums(directory: str, recursive: bool, verbose: bool) -> dict[str, bytes]:
    # Collect files to calculate digests from
    files = [
        e.path for e in scan_directory(directory, recursive, verbose) if e.is_file()
    ]

    out = {}
    # Calculate checksums in parallell
    with ProcessPoolExecutor() as executor:
        future_to_path = {executor.submit(sha1, f): f for f in files}

        # Collect results as they complete
        for future in as_completed(future_to_path):
            path = future_to_path[future]
            try:
                out[path] = future.result()
            except Exception as e:
                raise RuntimeError(f"Error processing {path}") from e

    return out


def sha1(path: str) -> bytes:
    hasher = hashlib.sha1()
    with open(path, 'rb') as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hasher.update(chunk)
    return hasher.digest()


def scan_directory(
    root_dir: str, recursive: bool, verbose: bool
) -> Generator[os.DirEntry, None, None]:
    for entry in os.scandir(root_dir):
        if entry.is_file():
            if os.access(entry.path, os.R_OK):
                yield entry
            else:
                chat(f"scan r perms failed: {entry.path}", verbose)
        elif entry.is_dir() and recursive:
            if os.access(entry.path, os.R_OK) and os.access(entry.path, os.X_OK):
                yield from scan_directory(entry.path, recursive, verbose)
            else:
                chat(f"scan rx perms failed: {entry.path}", verbose)
        else:
            chat(f"scan skip: {entry.name}", verbose)


def move(relocs: list[Relocation], verbose: bool) -> bool:
    for r in relocs:
        chat(f"Moving {r.src} to {r.dst}", verbose)
        directory = dirname(r.dst)

        os.makedirs(directory, exist_ok=True)
        shutil.move(r.src, r.dst)


def remove(files: list[str], verbose: bool) -> bool:
    for f in files:
        chat(f"Removing {f}", verbose)
        os.remove(f)


def map_dst_to_sources(relocs: list[Relocation]) -> list[list[Relocation]]:
    out = {}
    for r in relocs:
        if r.dst in out:
            out[r.dst].append(r)
        else:
            out[r.dst] = [r]
    return out


def invert_dict_buckets(d: dict[str, any]) -> dict[any, list[str]]:
    inverted_map = {}
    for k, v in d.items():
        if v in inverted_map:
            inverted_map[v].append(k)
        else:
            inverted_map[v] = [k]
    return inverted_map


def chat(s: str, verbose: bool) -> None:
    if verbose:
        print(s)


def prompt_relocation_sources(
    similar_dsts: list[list[Relocation]],
) -> tuple[list[Relocation], bool]:
    """Given buckets of similar destinations, let the user choose sources"""
    relocs_out = []
    for srcs in similar_dsts:
        srcs_strs = [s.src for s in srcs]
        src_opts = [(f"{n+1}", s) for n, s in enumerate(srcs_strs)]
        opts = src_opts + [("s", "Skip"), ("a", "Skip all"), ("q", "Quit")]
        choice = prompt_options(
            "These would end up in the same destination, pick which one to move.",
            opts,
        )
        choice = case_insensitive_validate(choice, opts)
        if not choice or choice == "q":
            return None, False
        if choice == "s":
            continue
        if choice == "a":
            break

        result = [r for opt, src in opts if opt == choice for r in srcs if r.src == src]
        if len(result) != 1:
            raise RuntimeError(
                f"Could not determine result from user decision: {result}"
            )

        relocs_out.append(result[0])

    return relocs_out, True


def prompt_multi_combi_skip(
    msg: str, similar: list[list[str]]
) -> tuple[list[str], bool]:
    """Multiple choices prompts, where user can pick none to many options"""
    print()
    out = []
    for alts in similar:
        choices, action = multi_opt_parse_loop(msg, alts)
        if action == PromptAction.QUIT:
            return None, False
        if action == PromptAction.SKIPALL:
            break
        if action == PromptAction.OK:
            out += choices
        print()

    return out, True


def multi_opt_parse_loop(msg: str, opts: list[str]) -> tuple[list[str], PromptAction]:
    numbered_opts = [(f"{n+1}", s) for n, s in enumerate(opts)]

    print_options(msg, numbered_opts)
    print_align_indent(
        [["n)", "None,", "a)", "All"], ["q)", "Quit,", "s)", "Skip all"]], "  "
    )

    max_val = len(opts)
    answer = None
    while not answer:
        choice = input_choose_options(multi_select=True)
        if not choice:
            continue

        multi = choice.split(",")
        if len(multi) == 1:
            # When only one command was given, it could be a special case
            if choice == "q":
                return None, PromptAction.QUIT
            if choice == "s":
                return None, PromptAction.SKIPALL
            if choice == "n":
                return [], PromptAction.OK
            if choice == "a":
                return opts, PromptAction.OK

        int_or_range, err = parse_multi_opt_answer(multi)
        if err:
            print(f"Parse error: {err}", file=sys.stderr)
            continue

        # 1, 2, 3 -> 0, 1, 2
        bounds_ok = [valid_bounds(ior, 1, max_val) for ior in int_or_range]
        if not all(bounds_ok):
            print("One or multiple answers are out of bounds", file=sys.stderr)
            continue

        shifted = [shift_step(ior, -1) for ior in int_or_range]
        return list({opts[s] for s in yield_ranges(shifted)}), PromptAction.OK

    print("unknown error", file=sys.stderr)
    return None, PromptAction.QUIT


def yield_ranges(many: list[int | Range]) -> Generator[int, None, None]:
    for m in many:
        if isinstance(m, int):
            yield m
        elif isinstance(m, Range):
            yield from m.iter()
        else:
            raise RuntimeError(f"bad range: {str(m)}")


def valid_bounds(p: int | Range, min: int, max: int) -> bool:  # pylint: disable=W0622
    if isinstance(p, int):
        return min <= p <= max
    if isinstance(p, Range):
        return min <= p.min <= p.max <= max
    return False


def shift_step(p: int | Range, step: int) -> list[int | Range]:
    if isinstance(p, int):
        return p + step
    if isinstance(p, Range):
        return p.shift(step)
    return None


def parse_multi_opt_answer(
    opts: list[str],
) -> tuple[list[int | Range] | None, str | None]:
    out = []
    for o in opts:
        ans, err = parse_int_or_range(o)
        if err:
            return None, err
        out.append(ans)
    return out, None


def parse_int_or_range(in_s: str) -> tuple[int | Range | None, str | None]:
    # Remove whitespaces
    s = in_s.replace(" ", "")
    try:
        return int(s), None
    except ValueError:
        pass
    rs = s.split("-")
    if len(rs) != 2:
        return None, f"Not int or range: {s}"

    min, max = 0, 0  # pylint: disable=W0622
    try:
        min = int(rs[0])
        max = int(rs[1])
    except ValueError:
        return None, f"Could not parse range: {s}"

    range = Range(min, max)  # pylint: disable=W0622
    if range.valid():
        return range, None
    return None, f"Invalid range: {s}"


def prompt_yn(message: str, default_yes: bool = False) -> bool:
    options = "Y/n" if default_yes else "y/N"
    user_input = input(f"{message} ({options}): ").strip().lower()

    if not user_input:
        user_input = "y" if default_yes else "n"

    return user_input == "y"


def prompt_options(message: str, options: list[tuple[str, str]]) -> Optional[str]:
    print_options(message, options)
    return input_choose_options()


def print_options(message: str, options: list[tuple[str, str]]) -> None:
    print(message)
    print("Options:")
    for opt, text in options:
        print(f"  {opt}) {text}")


def input_choose_options(multi_select: bool = False):
    s = "s" if multi_select else ""
    return input(f"Choose option{s}: ").strip().lower()


def case_insensitive_validate(choice: str, options: list[tuple[str, str]]) -> Optional[str]:
    opts = {k.lower(): v for k, v in options}
    if choice not in opts:
        return None

    return choice


def print_checksums(checksums: dict[str, bytes]) -> None:
    data = [[path, csum.hex()] for path, csum in checksums.items()]
    sort = sorted(data, key=lambda x: x[1])

    cols = [["Path", "Checksum"]]
    cols += sort
    lines = matrix_space_align(cols)
    for l in lines:
        print(l)


def print_buckets(buckets: dict[str, any]) -> None:
    for k in buckets.keys():
        print(k)
        vals = buckets[k]
        for v in vals:
            print(f"  {v}")


def print_relocs(relocs: list[Relocation]) -> None:
    tabs = [[r.src, "->", r.dst] for r in relocs]
    print_align_indent(tabs)


def print_align_indent(matrix: list[list[str]], indent: str = "") -> None:
    lines = matrix_space_align(matrix)
    for l in lines:
        print(f"{indent}{l}")


# Align spaces between columns of strings in a matrix
def matrix_space_align(matrix: list[list[str]]) -> list[str]:
    col_widths = [
        max(len(str(row[col])) for row in matrix if col < len(row))
        for col in range(max(len(row) for row in matrix))
    ]

    space = " "
    aligned_rows = []
    for row in matrix:
        aligned_row = space.join(
            (
                str(row[col]).ljust(col_widths[col])
                if col < len(row)
                else space * col_widths[col]
            )
            for col in range(len(col_widths))
        )
        aligned_rows.append(aligned_row)

    return aligned_rows


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="File system organization")

    def add_v(p):
        p.add_argument("-v", "--verbose", action="store_true", help="Verbose output")

    def add_dir(p, msg):
        p.add_argument("directory", help=msg)
        p.add_argument(
            "-r",
            "--recursive",
            action="store_true",
            help="Recursively traverse subdirectories",
        )

    subparsers = parser.add_subparsers(
        dest="command", required=True, help="Sub-commands (choose one)"
    )

    date_mv = subparsers.add_parser(
        "date-mv", help="Organize files into folders, based on filename dates"
    )
    add_v(date_mv)
    add_dir(date_mv, "Directory to organize")
    date_mv.add_argument(
        "-R",
        "--relative",
        action="store_true",
        help="Destination is always relative to the file location (as opposed to the input directory)",
    )
    date_mv.add_argument(
        "-f",
        "--dst-fmt",
        default="%Y/%Y-%m",
        help="Destination directory (date) format",
    )
    date_mv.add_argument(
        "-a",
        "--apply",
        action="store_true",
        help="Actually perform the file operations",
    )
    date_mv.set_defaults(func=date_mv_cmd)

    sum_rm = subparsers.add_parser(
        "sum-rm", help="Remove duplicate files, based on checksum"
    )
    add_v(sum_rm)
    add_dir(sum_rm, "Directory to prune")
    sum_rm.add_argument(
        "-a",
        "--apply",
        action="store_true",
        help="Actually perform the file operations",
    )
    sum_rm.set_defaults(func=checksum_rm_cmd)

    return parser.parse_args()


def main() -> int:
    args = parse_args()
    return args.func(args)


if __name__ == "__main__":
    sys.exit(main())
